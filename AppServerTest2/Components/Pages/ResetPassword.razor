@page "/reset-password"
@inject HttpClient Http
@inject IAlertService AlertService
@inject NavigationManager NavigationManager
@inject ILogger<ResetPassword> Logger
@using System.ComponentModel.DataAnnotations

<h3 class="text-center">Reset Password</h3>

<EditForm Model="@resetPasswordModel" OnValidSubmit="HandleValidSubmit" class="container my-4">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="resetPasswordModel.Email" />
        <ValidationMessage For="@(() => resetPasswordModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="code" class="form-label">Reset Code</label>
        <InputText id="code" type="text" class="form-control" @bind-Value="resetPasswordModel.Code" />
        <ValidationMessage For="@(() => resetPasswordModel.Code)" />
    </div>

    <div class="mb-3">
        <label for="newPassword" class="form-label">New Password</label>
        <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetPasswordModel.NewPassword" />
        <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
    </div>

    <button type="submit" class="btn btn-primary w-100 mb-3 d-flex align-items-center" disabled="@isSubmitting">
        @if (isSubmitting)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            <span>Processing...</span>
        }
        else
        {
            <i class="bi bi-lock me-2"></i>
            <span>Reset Password</span>
        }
    </button>

    <p class="text-center">
        Remember your password? <NavLink href="/login">Login here</NavLink>
    </p>
</EditForm>

@code {
    private ResetPasswordModel resetPasswordModel = new();
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;
        isSubmitting = true;

        try
        {
            Logger.LogInformation("Sending reset password request for email: {Email} with code: {Code}", resetPasswordModel.Email, resetPasswordModel.Code);

            var response = await Http.PostAsJsonAsync("reset-password", resetPasswordModel);

            if (response.IsSuccessStatusCode)
            {
                var message = await response.Content.ReadAsStringAsync();
                await AlertService.ShowAlertAsync("Success", message, "OK");
                Logger.LogInformation("Password reset succeeded for email: {Email}", resetPasswordModel.Email);

                // Navigate to login page
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await AlertService.ShowAlertAsync("Error", error, "OK");
                Logger.LogWarning("Password reset failed for email: {Email}. Error: {Error}", resetPasswordModel.Email, error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("An error occurred while resetting password: {Message}", ex.Message);
            await AlertService.ShowAlertAsync("Error", "An unexpected error occurred. Please try again later.", "OK");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Reset code is required.")]
        public string Code { get; set; } = string.Empty;

        [Required(ErrorMessage = "New password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string NewPassword { get; set; } = string.Empty;
    }
}
