@page "/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAlertService AlertService

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" class="container min-vh-100 d-flex flex-column justify-content-between">
    <DataAnnotationsValidator />

    <div class="mb-4 flex-grow-1 overflow-auto">
        <ValidationSummary class="alert alert-danger h-100" />
    </div>

    <div style="position: fixed; bottom: 0; left: 0; right: 0; background: white; box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1); padding: 1rem;">
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" class="form-control w-100" @bind-Value="loginModel.Email" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control w-100" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary w-100 mb-3">Login</button>

        <p class="text-center">Don't have an account? <NavLink href="/register">Register here</NavLink></p>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new();

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();

                // Store tokens securely
                await SecureStorage.SetAsync("AccessToken", loginResponse!.AccessToken);
                await SecureStorage.SetAsync("RefreshToken", loginResponse.RefreshToken);

                // Navigate to the dashboard or home page
                await AlertService.ShowAlertAsync("Success", "Login successful.", "OK");
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                // Handle errors
                var errorMessage = await response.Content.ReadAsStringAsync();
                await AlertService.ShowAlertAsync("Error", $"Login failed: {errorMessage}", "OK");
            }
        }
        catch (Exception ex)
        {
            await AlertService.ShowAlertAsync("Error", $"An error occurred: {ex.Message}", "OK");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public string AccessToken { get; set; } = string.Empty;
        public string RefreshToken { get; set; } = string.Empty;
    }
}
