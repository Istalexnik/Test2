@page "/login"
@inject HttpClient Http
@inject ILogger<Login> Logger


<h3 class="text-center">Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" class="container my-4">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary w-100 mb-3">Login</button>

    <p class="text-center">
        Don't have an account? <NavLink href="/register">Register here</NavLink>
    </p>

    <p class="text-center">
        Forgot your password? <NavLink href="/forgot-password">Reset it here</NavLink>
    </p>
</EditForm>

@code {
    private LoginModel loginModel = new();

    private async Task HandleValidSubmit()
    {
        try
        {
            Logger.LogInformation("Sending login request: {@LoginModel}", loginModel);

            var response = await Http.PostAsJsonAsync("login", loginModel);

            var responseContent = await response.Content.ReadAsStringAsync();
            Logger.LogInformation("Received response: Status Code {StatusCode}, Content: {ResponseContent}", response.StatusCode, responseContent);

            if (response.IsSuccessStatusCode)
            {
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();

                Logger.LogInformation("Login successful. Tokens received: {@LoginResponse}", loginResponse);

                await SecureStorageService.SetAccessTokenAsync(loginResponse!.AccessToken);
                await SecureStorageService.SetRefreshTokenAsync(loginResponse.RefreshToken);

                if (AuthenticationStateProvider is SecureStorageAuthenticationStateProvider authProvider)
                {
                    authProvider.NotifyUserAuthentication();
                }

                await AlertService.ShowAlertAsync("Success", "Login successful.", "OK");
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                Logger.LogWarning("Login failed with Status Code {StatusCode} and Content: {ResponseContent}", response.StatusCode, responseContent);
                await AlertService.ShowAlertAsync("Error", $"Login failed: {responseContent}", "OK");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("An error occurred during login: {Message}", ex.Message);
            await AlertService.ShowAlertAsync("Error", $"An error occurred: {ex.Message}", "OK");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public string AccessToken { get; set; } = string.Empty;
        public string RefreshToken { get; set; } = string.Empty;
    }
}
