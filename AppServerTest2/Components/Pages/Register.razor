@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAlertService AlertService

<h3 class="text-center">Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit" class="container my-4">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="confirmEmail" class="form-label">Confirm Email</label>
        <InputText id="confirmEmail" type="email" class="form-control" @bind-Value="registerModel.ConfirmEmail" />
        <ValidationMessage For="@(() => registerModel.ConfirmEmail)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary w-100 mb-3">Register</button>

    <p class="text-center">
        Already have an account? <NavLink href="/login">Login here</NavLink>
    </p>
</EditForm>

@code {
    private RegisterModel registerModel = new();

    private async Task HandleValidSubmit()
    {
        if (registerModel.Email != registerModel.ConfirmEmail)
        {
            await AlertService.ShowAlertAsync("Error", "Email and Confirm Email must match.", "OK");
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                // Registration successful
                await AlertService.ShowAlertAsync("Success", "Registration successful. Please check your email to confirm your account.", "OK");

                // Navigate to email confirmation page with the email as a query parameter
                var encodedEmail = Uri.EscapeDataString(registerModel.Email);
                NavigationManager.NavigateTo($"/email-confirmation?email={encodedEmail}");
            }
            else
            {
                // Handle errors
                var errorMessage = await response.Content.ReadAsStringAsync();
                await AlertService.ShowAlertAsync("Error", $"Registration failed: {errorMessage}", "OK");
            }
        }
        catch (Exception ex)
        {
            await AlertService.ShowAlertAsync("Error", $"An error occurred: {ex.Message}", "OK");
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        [Compare("Email", ErrorMessage = "Email and Confirm Email must match.")]
        public string ConfirmEmail { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = string.Empty;
    }
}
