@page "/forgot-password"
@inject HttpClient Http
@inject IAlertService AlertService
@inject ILogger<ForgotPassword> Logger


<h3 class="text-center">Forgot Password</h3>

<EditForm Model="@forgotPasswordModel" OnValidSubmit="HandleValidSubmit" class="container my-4">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="forgotPasswordModel.Email" />
        <ValidationMessage For="@(() => forgotPasswordModel.Email)" />
    </div>

    <button type="submit" class="btn btn-primary w-100 mb-3 d-flex align-items-center">
        <i class="bi bi-envelope me-2"></i>
        <span>Send Reset Code</span>
    </button>


    <p class="text-center">
        Remember your password? <NavLink href="/login">Login here</NavLink>
    </p>
</EditForm>

@code {
    private ForgotPasswordModel forgotPasswordModel = new();
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;
        isSubmitting = true;

        try
        {
            Logger.LogInformation("Sending forgot password request for email: {Email}", forgotPasswordModel.Email);

            var response = await Http.PostAsJsonAsync("forgot-password", forgotPasswordModel);

            if (response.IsSuccessStatusCode)
            {
                var message = await response.Content.ReadAsStringAsync();
                await AlertService.ShowAlertAsync("Success", message, "OK");
                Logger.LogInformation("Forgot password request succeeded for email: {Email}", forgotPasswordModel.Email);

                // Navigate to Reset Password page with email as query parameter
                var encodedEmail = Uri.EscapeDataString(forgotPasswordModel.Email);
                NavigationManager.NavigateTo($"/reset-password?email={encodedEmail}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await AlertService.ShowAlertAsync("Error", error, "OK");
                Logger.LogWarning("Forgot password request failed for email: {Email}. Error: {Error}", forgotPasswordModel.Email, error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("An error occurred while requesting password reset: {Message}", ex.Message);
            await AlertService.ShowAlertAsync("Error", "An unexpected error occurred. Please try again later.", "OK");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = string.Empty;
    }
}


