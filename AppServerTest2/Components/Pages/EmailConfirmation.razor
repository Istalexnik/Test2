@page "/email-confirmation"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAlertService AlertService

<h3 class="text-center">Email Confirmation</h3>

<EditForm Model="@confirmationModel" OnValidSubmit="HandleValidSubmit" class="container my-4">
    <DataAnnotationsValidator />

    <div class="mb-3 text-center">
        <label for="code" class="form-label">Enter the 6-digit Confirmation Code</label>
        <div class="d-flex justify-content-center">
            <InputText id="code" class="form-control text-center w-50" maxlength="6" type="text" @bind-Value="confirmationModel.ConfirmationCode" />
        </div>
        <ValidationMessage For="@(() => confirmationModel.ConfirmationCode)" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Confirm</button>
</EditForm>

@code {
    private ConfirmationModel confirmationModel = new();

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            confirmationModel.Email = email!;
        }
        else
        {
            // Handle the case where the email is not provided
            AlertService.ShowAlertAsync("Error", "Email is required for confirmation.", "OK");
            NavigationManager.NavigateTo("/register");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("confirm-email", confirmationModel);

            if (response.IsSuccessStatusCode)
            {
                // Confirmation successful
                await AlertService.ShowAlertAsync("Success", "Email confirmed successfully. You can now log in.", "OK");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                // Handle errors
                var errorMessage = await response.Content.ReadAsStringAsync();
                await AlertService.ShowAlertAsync("Error", $"Confirmation failed: {errorMessage}", "OK");
                confirmationModel.ConfirmationCode = string.Empty;
            }
        }
        catch (Exception ex)
        {
            await AlertService.ShowAlertAsync("Error", $"An error occurred: {ex.Message}", "OK");
        }
    }

    public class ConfirmationModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirmation code is required.")]
        [RegularExpression(@"^\d{6}$", ErrorMessage = "Please enter a valid 6-digit code.")]
        public string ConfirmationCode { get; set; } = string.Empty;
    }
}
