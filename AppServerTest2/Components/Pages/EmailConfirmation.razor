@page "/email-confirmation"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAlertService AlertService

<h3>Email Confirmation</h3>

<EditForm Model="@confirmationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Email field removed -->

    <div class="mb-3">
        <label for="code" class="form-label">Confirmation Code</label>
        <InputText id="code" class="form-control" @bind-Value="confirmationModel.ConfirmationCode" />
        <ValidationMessage For="@(() => confirmationModel.ConfirmationCode)" />
    </div>

    <button type="submit" class="btn btn-primary">Confirm Email</button>

    <p>Email: @confirmationModel.Email</p>

</EditForm>

@code {
    private ConfirmationModel confirmationModel = new();

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            confirmationModel.Email = email!;
            Console.WriteLine($"Email set to: {confirmationModel.Email}");
        }
        else
        {
            // Handle the case where the email is not provided
            AlertService.ShowAlertAsync("Error", "Email is required for confirmation.", "OK");
            NavigationManager.NavigateTo("/register");
        }
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("confirm-email", confirmationModel);

            if (response.IsSuccessStatusCode)
            {
                // Confirmation successful
                await AlertService.ShowAlertAsync("Success", "Email confirmed successfully. You can now log in.", "OK");
                // Navigate to login page
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                // Handle errors
                var errorMessage = await response.Content.ReadAsStringAsync();
                await AlertService.ShowAlertAsync("Error", $"Confirmation failed: {errorMessage}", "OK");
            }
        }
        catch (Exception ex)
        {
            await AlertService.ShowAlertAsync("Error", $"An error occurred: {ex.Message}", "OK");
        }
    }

    public class ConfirmationModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string ConfirmationCode { get; set; } = string.Empty;
    }
}
